
CREATE TABLE posts (
    postId BIGINT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(255),
    content VARCHAR(1000),
    sharingDate TIMESTAMP,
    comment_count BIGINT,
    username VARCHAR(255),
    FOREIGN KEY (username) REFERENCES users(username)
);

CREATE TABLE comments (
    commentId BIGINT PRIMARY KEY,
    content VARCHAR(255),
    commentDate TIMESTAMP,
    username VARCHAR(255),
    postId BIGINT,
    FOREIGN KEY (username) REFERENCES users(username),
    FOREIGN KEY (postId) REFERENCES posts(postId)
);
CREATE TABLE roles (
    role_id SERIAL PRIMARY KEY,
    role_name VARCHAR(20) UNIQUE NOT NULL
);

INSERT INTO roles (role_name) VALUES ('USER');
INSERT INTO roles (role_name) VALUES ('ADMIN');

CREATE TABLE users (
    username VARCHAR(255) PRIMARY KEY,
    fname VARCHAR(255),
    lname VARCHAR(255),
    email VARCHAR(255),
    about VARCHAR(500),
    password VARCHAR(255) NOT NULL
);

CREATE TABLE user_roles (
    username VARCHAR(255) REFERENCES users(username),
    role_id SERIAL REFERENCES roles(role_id),
    PRIMARY KEY (username, role_id)
); 

CREATE TABLE follow (
    follower_username VARCHAR(255) NOT NULL,
    followed_username VARCHAR(255) NOT NULL,
    PRIMARY KEY (follower_username, followed_username),
    CONSTRAINT follower FOREIGN KEY (follower_username) REFERENCES User (username),
    CONSTRAINT followed FOREIGN KEY (followed_username) REFERENCES User (username)
);

CREATE TABLE post_log (
    postId BIGINT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    title VARCHAR(255),
    content VARCHAR(1000),
    sharingDate DATE,
    commentCount BIGINT,
    CONSTRAINT postLog_user FOREIGN KEY (username) REFERENCES User (username)
); 

Silmeden Ã¶nce kaydet

CREATE OR REPLACE FUNCTION post_delete_trigger_function()
  RETURNS TRIGGER AS $$
  BEGIN
      INSERT INTO post_log SELECT * FROM posts WHERE post_id = OLD.post_id;
      RETURN OLD;
  END;
 $$ LANGUAGE plpgsql;


  CREATE TRIGGER post_delete_trigger
  BEFORE DELETE ON posts
  FOR EACH ROW
  EXECUTE FUNCTION post_delete_trigger_function();



ALTER TABLE IF EXISTS public.comment
    ADD CONSTRAINT fk7jok1s6lywoh0srylq8lt7tmn FOREIGN KEY (post_id)
    REFERENCES public.posts (post_id) MATCH SIMPLE
    ON UPDATE CASCADE
    ON DELETE CASCADE
    NOT VALID;
CREATE INDEX IF NOT EXISTS fki_fk7jok1s6lywoh0srylq8lt7tmn
    ON public.comment(post_id);
